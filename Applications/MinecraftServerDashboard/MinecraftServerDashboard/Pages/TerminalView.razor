@page "/"
@using System.Management.Automation
@using ButtonData.Json
@using System.Diagnostics
@inject IConfiguration config;

<PageTitle>TerminalView</PageTitle>

<div>
    <div>
        <select class="custom-select" @onchange="OnSelectionChanged" title="Select a Server" disabled="@Program.ServerRunning">  
            <option value="@EmptyGameInfo" selected disabled="disabled">(Choose Game Server)</option>
            @foreach (var item in gameInfos)  
            {  
                <option value="@item.id"> @item.DisplayName</option>  
            }  
        </select> 
    </div>
    <div>
        <button
            class="btn btn-dark"
            @onclick="OnStartServerButtonClick"
            disabled="@(Program.ServerRunning && ServerSelected)"
        >
            Start Server
        </button>
    </div>
    <div>
        <button
            class="btn btn-dark"
            @onclick="OnStopServerButtonClick"
            disabled="@(!Program.ServerRunning)"
        >
            Stop Server
        </button>
    </div>
    
    <Xterm 
        @ref="_terminal" 
        Options="_options"
        OnKey="@OnKey"
    />
</div>



@code
{
    private GameServerInfo EmptyGameInfo = new GameServerInfo()
    {
        id = -1
    };

    protected override Task OnInitializedAsync()
    {
        LoadGameSelectDropdown();

        Program.ServerProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
        {
            _terminal.WriteLine(e.Data);
        });
        return Task.CompletedTask;
    }
    

    private void OnStartServerButtonClick()
    {

        if(DropdownSelectionId >= 0)
        {
            Program.ServerRunning = true;
            GameServerInfo gameInfo = gameInfos.Where(x => x.id == DropdownSelectionId).Single();

            ProcessStartInfo info = new ProcessStartInfo();
            info.Arguments = string.Join(" ", Program.ActiveServer.Args);
            info.FileName = Program.ActiveServer.Process;
            info.WorkingDirectory = Program.ActiveServer.WorkingDir;
            info.RedirectStandardInput = true;
            info.RedirectStandardOutput = true;

            Program.ServerProcess = Process.Start(info);

            Program.ServerInput = Program.ServerProcess.StandardInput;
        }
    }
    
    private void OnStopServerButtonClick()
    {
        Program.ServerInput.WriteLine("stop");
        Program.ServerRunning = false;
    }
    

    private List<GameServerInfo> gameInfos = new List<GameServerInfo>();
    private void LoadGameSelectDropdown()
    {
        DropdownSelectionId = -1;
        int currentIndex = 0;
        foreach (var dir in Directory.GetDirectories(config["GameServersDir"]))
        {
            var filePath = dir + "\\ServerInfo.json";
            try
            {
                using (var reader = new StreamReader(filePath))
                {
                    var serializer = new Newtonsoft.Json.JsonSerializer();
                    var serverInfo = (GameServerInfo?)serializer.Deserialize(reader, typeof(GameServerInfo)) ?? new GameServerInfo();
                    serverInfo.id = currentIndex;
                
                    gameInfos.Add(serverInfo);
                }
                currentIndex++;
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
            
        }
    }
    
    int DropdownSelectionId { get; set; }
    bool ServerSelected = false;

    private Task OnSelectionChanged(ChangeEventArgs e)
    {
        if (int.Parse(e.Value.ToString()) != DropdownSelectionId)
        {
            DropdownSelectionId = int.Parse(e.Value.ToString());
            Program.ActiveServer = gameInfos.Where(x => x.id == DropdownSelectionId).Single();
            ServerSelected = true;
        }
        return Task.CompletedTask;
    }
    
    
    private Xterm _terminal;

    private TerminalOptions _options = new TerminalOptions
    {
        CursorBlink = true,
        CursorStyle = CursorStyle.Bar,
        Theme =
        {
            Background = "#181a1d",
        },
    };

    private string terminalLine { get; set; }
    
    private async Task OnKey(KeyboardEventArgs args)
    {
        if (terminalLine == null)
            terminalLine = "";
        
        switch (args.Code)
        {
            case "Enter":
                if (Program.ServerRunning)
                    Program.ServerInput.WriteLine(terminalLine);
                terminalLine = "";
                await _terminal.Write("\n\r");
                break;
            case "Backspace":
                terminalLine.Remove(terminalLine.Length - 1, 1);
                await _terminal.Write("\b");
                break;
            default:
                terminalLine += args.Key;
                await _terminal.Write(args.Key);
                break;
        }
        
        Console.WriteLine(args.Code);
    }
}
